function [Y,Xf,Af] = fun_mod3_1(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 20-Jun-2023 11:20:48.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx10 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx10 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.225092484438372;0;-0.439362237169278;0;1;1;1;1;1;1];
x1_step1.gain = [4.59480842941416;17.657831246648;2.64096176547776;13.5377702128395;0.142857142857143;0.142857142857143;0.142857142857143;0.142857142857143;0.142857142857143;0.142857142857143];
x1_step1.ymin = -1;

% Layer 1
b1 = [10.785236651363199201;-23.036734149194433741;0.24855662290597399511];
IW1_1 = [3.8420886774465023983 -0.83557667110190725346 -1.8962267384190480968 1.563607623659060808 -4.2578252923101906902 -5.9595870459795428076 5.8395196197802539118 -4.7991322791012631654 -5.2296553999113868372 5.8241017594468624807;-1.1721581544372108308 -1.8506425469796476957 -0.51731058806330543209 28.639931203708158591 -0.16482970002914831831 3.1418333141365191175 -1.8508800091913315544 0.5479480862655257134 3.8672458070550672637 -2.0597699865762852944;-0.53976720068061301294 -0.54303959313951533083 -1.343312977043012113 0.32077625700182715862 0.34008124574673970208 0.29654744066423316395 -0.30434153206810526937 -0.56257401381391292094 0.2293239523360257881 -0.083146337586887483773];

% Layer 2
b2 = [-0.054170645564358271828;-0.69258215268492573369;0.086199613937307989486;-0.092525014825944718044;-0.35684375037222998417;-0.036396915329785797799;-0.97554308101991771274;-0.11124655863363897002;-0.18708788383582647397;-0.98599909435419330617];
LW2_1 = [0.22653981782381094057 -0.17602032874044498678 -0.2794085445134024126;-0.51332786958547471645 -0.032389144860141293181 -0.54572515190066450685;-0.15639538121275053939 -0.047216545906020722378 -0.86427752611502606239;-0.018246364638547903081 -0.013538596166079339481 -0.29980634089913560381;0.76396496077307851635 0.30963950051754879356 0.020637334494013018227;-0.020579012612059032622 0.94658651425676854085 -0.085810706640273959334;0.91167020286744315793 0.94606950868401229471 -0.11033788834765988207;0.25890062348849807172 0.48156808802575162831 -1.01660893304888722;0.61118974615400289974 0.82968549132909130694 0.93095615438229595284;0.9083188528980035148 0.95194646341085353836 -0.10786457278325950471];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [4.59480842941416;132.231052605785;2.64096176547776;82.1354851825101;0.115818736781322;0.139329466597503;0.137279289222752;0.138428815802606;0.139971039991826;0.161019316682326];
y1_step1.xoffset = [-0.225092484438372;0.0981391523410282;-0.439362237169278;0.123384805238558;1.95565;0.855761150372363;1.11514;0.567901181160179;0.27463;-1.21961];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
